{
  "address": "0xbF564fe62F4a2F67898d84738C9ED6Fcb015e6b8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_appId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_actionId",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        }
      ],
      "name": "deployModel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_model",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "promptCommitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aigcData",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "worldId_proof",
          "type": "uint256[8]"
        }
      ],
      "name": "freeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_model",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "promptCommitment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aigcData",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signedPrompt",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mintGMASS",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "worldId",
      "outputs": [
        {
          "internalType": "contract WorldID",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf94d5e0a09f014f0adf88e911f46b599bed40fc3d549dad23fa2fd79577b78d",
  "receipt": {
    "to": null,
    "from": "0xF93398B7881610eCfC71D5eb794BAa696d8f3Eb3",
    "contractAddress": "0xbF564fe62F4a2F67898d84738C9ED6Fcb015e6b8",
    "transactionIndex": 10,
    "gasUsed": "2684813",
    "logsBloom": "0x
    "blockHash": "0x8d6736e3d1980e7e12001bc91a3fecc6ffeb34c85bc8fdaf44b661ad6f722648",
    "transactionHash": "0xbf94d5e0a09f014f0adf88e911f46b599bed40fc3d549dad23fa2fd79577b78d",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 38213909,
        "transactionHash": "0xbf94d5e0a09f014f0adf88e911f46b599bed40fc3d549dad23fa2fd79577b78d",
        "address": "0xbF564fe62F4a2F67898d84738C9ED6Fcb015e6b8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f93398b7881610ecfc71d5eb794baa696d8f3eb3"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x8d6736e3d1980e7e12001bc91a3fecc6ffeb34c85bc8fdaf44b661ad6f722648"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 38213909,
        "transactionHash": "0xbf94d5e0a09f014f0adf88e911f46b599bed40fc3d549dad23fa2fd79577b78d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f93398b7881610ecfc71d5eb794baa696d8f3eb3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000016089c8eb42e3d00000000000000000000000000000000000000000000000002c51933315c158000000000000000000000000000000000000000000000334626b31f7551a8415000000000000000000000000000000000000000000000000002af1096a2a7e74300000000000000000000000000000000000000000000334626c92811e05c6f8d",
        "logIndex": 52,
        "blockHash": "0x8d6736e3d1980e7e12001bc91a3fecc6ffeb34c85bc8fdaf44b661ad6f722648"
      }
    ],
    "blockNumber": 38213909,
    "cumulativeGasUsed": "4027885",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x719683F13Eeea7D84fCBa5d7d17Bf82e03E3d260",
    "app_staging_20ad19bc247ebb95a2fe7023f096f13d",
    "login"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5792b3f6fd314ac850c35da1dd78b5a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_actionId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"deployModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_model\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"promptCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aigcData\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"worldId_proof\",\"type\":\"uint256[8]\"}],\"name\":\"freeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_model\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"promptCommitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aigcData\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signedPrompt\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintGMASS\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worldId\",\"outputs\":[{\"internalType\":\"contract WorldID\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit()\":{\"details\":\"Deposit ETH to the contract\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Withdraw ETH from the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ModelMarket.sol\":\"ModelMarket\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/GMASS.sol\":{\"content\":\"pragma solidity ^0.8.18;\\nimport { IERC7007 } from \\\"./interfaces/IERC7007.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Verifier } from \\\"./VerifierBase.sol\\\";\\n\\ncontract GMASS is Ownable, ERC721, IERC7007 {\\n\\n    uint256 public counter;\\n    address public verifier;\\n    mapping(uint256 => string) public tokenURIs;\\n\\n    constructor(address verifier) ERC721(\\\"GMASS\\\", \\\"GMASS\\\") {\\n        verifier = verifier;\\n    }\\n\\n    /**\\n     * @dev Mint token at `tokenId` given `promptCommitment`, `aigcData`, `uri` and `proof`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must not exist.'\\n     * - verify(`promptCommitment`, `aigcData`, `proof`) must return true.\\n     *\\n     * Optional:\\n     * - `proof` should not include `aigcData` to save gas.\\n     */\\n    function mint(\\n        uint256 promptCommitment,\\n        uint256 aigcData,\\n        string calldata uri,\\n        bytes calldata proof,\\n        address to\\n    ) external override onlyOwner returns (uint256 tokenId) {\\n        require(_verify(promptCommitment, aigcData, proof), \\\"Verification failed\\\");\\n        _mint(to, counter);\\n        tokenURIs[counter] = uri;\\n        counter += 1;\\n        return counter;\\n    }\\n\\n    /**\\n     * @dev Verify the `promptCommitment`, `aigcData` and `proof`.\\n     */\\n    function verify(\\n        uint256 promptCommitment,\\n        uint256 aigcData,\\n        bytes calldata proof\\n    ) external override view returns (bool success) {\\n\\n        return _verify(promptCommitment, aigcData, proof);\\n    }\\n\\n    function _verify(\\n        uint256 promptCommitment,\\n        uint256 aigcData,\\n        bytes calldata proof\\n    ) internal view returns (bool success) {\\n        uint256[] memory pubInputs = new uint256[](1);\\n        pubInputs[0] = promptCommitment;\\n        pubInputs[1] = aigcData;\\n\\n        Verifier verifier = Verifier(verifier);\\n        return verifier.verify(pubInputs, proof);\\n    }\\n}\\n\",\"keccak256\":\"0x162c0aa452a23cb18af8ed47659b7c9fed94ff0dc0e990b7bbf653ecb4b7c356\"},\"contracts/ModelMarket.sol\":{\"content\":\"pragma solidity ^0.8.18;\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {GMASS} from \\\"./GMASS.sol\\\";\\nimport {WorldID} from \\\"./WorldID.sol\\\";\\nimport { IWorldID } from './interfaces/IWorldID.sol';\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n\\ncontract ModelMarket is Ownable {\\n    using ECDSA for bytes32;\\n\\n    mapping(address => uint256) public balances;\\n    mapping(address => uint256) public prices;\\n\\n    WorldID public immutable worldId;\\n\\n    constructor(address _worldId, string memory _appId, string memory _actionId) {\\n\\t\\tworldId = new WorldID(IWorldID(_worldId), _appId, _actionId);\\n\\t}\\n\\n    /**\\n     * @dev Deposit ETH to the contract\\n     */\\n    function deposit() external payable {\\n        balances[msg.sender] += msg.value;\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from the contract\\n     */\\n    function withdraw() external {\\n        // require(balances[msg.sender] > 0, \\\"Insufficient balance\\\");\\n        uint256 balance = balances[msg.sender];\\n        balances[msg.sender] = 0;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function getBalance(address _user) external view returns (uint256) {\\n        return balances[_user];\\n    }\\n\\n\\n    function deployModel(uint256 price, address verifier) external onlyOwner returns (address){\\n        address newModel = address(new GMASS(verifier));\\n        prices[newModel] = price;\\n        return newModel;\\n    }\\n\\n    function freeMint(\\n        address _model, \\n        uint256 promptCommitment,\\n        uint256 aigcData,\\n        string calldata uri, \\n        bytes calldata proof,\\n        address to,\\n        // world ID\\n        uint256 root, \\n        uint256 nullifierHash, \\n        uint256[8] calldata worldId_proof\\n    ) external onlyOwner {\\n        worldId.verify(to, root, nullifierHash, worldId_proof );\\n        GMASS(_model).mint(promptCommitment, aigcData, uri, proof, to);\\n    }\\n\\n    function mintGMASS(\\n        address _model, \\n        uint256 promptCommitment,\\n        uint256 aigcData,\\n        string calldata uri, \\n        bytes calldata proof,\\n        bytes memory signedPrompt,\\n        address to\\n    ) external payable onlyOwner {\\n        require(balances[to] >= prices[_model], \\\"Insufficient payment\\\");\\n        bytes32 _hash = keccak256(abi.encodePacked(promptCommitment));\\n        require(to == ECDSA.toEthSignedMessageHash(_hash).recover(signedPrompt));\\n\\n        payable(msg.sender).transfer(prices[_model]);\\n        balances[to] -= prices[_model];\\n        \\n        GMASS(_model).mint(promptCommitment, aigcData, uri, proof, to);\\n    }\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x48d21e54e705eeee424e7673b268540f4fb6d6be4eda5eb11bba242a455381b7\"},\"contracts/VerifierBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ncontract Verifier {\\n    function verify(\\n        uint256[] calldata pubInputs,\\n        bytes calldata proof\\n    ) public view returns (bool) {\\n        bool success = true;\\n        bytes32[] memory transcript;\\n        assembly { /* This is where the proof verification happens*/ }\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xba012bc1fd7bc102582c0e7c789077369443cbca3acce7d290f8ddcad6112288\",\"license\":\"MIT\"},\"contracts/WorldID.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { ByteHasher } from './helpers/ByteHasher.sol';\\nimport { IWorldID } from './interfaces/IWorldID.sol';\\n\\ncontract WorldID {\\n\\tusing ByteHasher for bytes;\\n\\n\\t///////////////////////////////////////////////////////////////////////////////\\n\\t///                                  ERRORS                                ///\\n\\t//////////////////////////////////////////////////////////////////////////////\\n\\n\\t/// @notice Thrown when attempting to reuse a nullifier\\n\\terror InvalidNullifier();\\n\\n\\t/// @dev The World ID instance that will be used for verifying proofs\\n\\tIWorldID internal immutable worldId;\\n\\n\\t/// @dev The contract's external nullifier hash\\n\\tuint256 internal immutable externalNullifier;\\n\\n\\t/// @dev The World ID group ID (always 1)\\n\\tuint256 internal immutable groupId = 1;\\n\\n\\t/// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n\\tmapping(uint256 => bool) internal nullifierHashes;\\n\\n\\t/// @param _worldId The WorldID instance that will verify the proofs\\n\\t/// @param _appId The World ID app ID\\n\\t/// @param _actionId The World ID action ID\\n\\tconstructor(IWorldID _worldId, string memory _appId, string memory _actionId) {\\n\\t\\tworldId = _worldId;\\n\\t\\texternalNullifier = abi.encodePacked(abi.encodePacked(_appId).hashToField(), _actionId).hashToField();\\n\\t}\\n\\n\\n\\n\\t/// @param signal An arbitrary input from the user, usually the user's wallet address (check README for further details)\\n\\t/// @param root The root of the Merkle tree (returned by the JS widget).\\n\\t/// @param nullifierHash The nullifier hash for this proof, preventing double signaling (returned by the JS widget).\\n\\t/// @param proof The zero-knowledge proof that demonstrates the claimer is registered with World ID (returned by the JS widget).\\n\\t/// @dev Feel free to rename this method however you want! We've used `claim`, `verify` or `execute` in the past.\\n\\tfunction verify(address signal, uint256 root, uint256 nullifierHash, uint256[8] calldata proof) public {\\n\\t\\t// First, we make sure this person hasn't done this before\\n\\t\\tif (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n\\n\\t\\t// We now verify the provided proof is valid and the user is verified by World ID\\n\\t\\tworldId.verifyProof(\\n\\t\\t\\troot,\\n\\t\\t\\tgroupId,\\n\\t\\t\\tabi.encodePacked(signal).hashToField(),\\n\\t\\t\\tnullifierHash,\\n\\t\\t\\texternalNullifier,\\n\\t\\t\\tproof\\n\\t\\t);\\n\\n\\t\\t// We now record the user has done this, so they can't do it again (proof of uniqueness)\\n\\t\\tnullifierHashes[nullifierHash] = true;\\n\\n\\t\\t// Finally, execute your logic here, for example issue a token, NFT, etc...\\n\\t\\t// Make sure to emit some kind of event afterwards!\\n\\t}\\n}\",\"keccak256\":\"0x6c92e078893c4f9eb084111efae5dd9c1960703bcff4c42d2216ad9891ae8e33\",\"license\":\"MIT\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nlibrary ByteHasher {\\n\\t/// @dev Creates a keccak256 hash of a bytestring.\\n\\t/// @param value The bytestring to hash\\n\\t/// @return The hash of the specified value\\n\\t/// @dev `>> 8` makes sure that the result is included in our field\\n\\tfunction hashToField(bytes memory value) internal pure returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encodePacked(value))) >> 8;\\n\\t}\\n}\",\"keccak256\":\"0xcf342f784a62f52b62acd4755647cca86304140e29a78fb4d571aa53af84b9dc\",\"license\":\"MIT\"},\"contracts/interfaces/IERC7007.sol\":{\"content\":\"pragma solidity ^0.8.18;\\n\\n// import ERC165 from openzeppelin\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC7007 compliant contract.\\n */\\ninterface IERC7007 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is minted.\\n     */\\n    event Mint(uint256 indexed tokenId, bytes indexed prompt, bytes indexed aigcData, string uri, bytes proof);\\n\\n    /**\\n     * @dev Mint token at `tokenId` given `prompt`, `aigcData`, `uri` and `proof`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must not exist.'\\n     * - verify(`prompt`, `aigcData`, `proof`) must return true.\\n     *\\n     * Optional:\\n     * - `proof` should not include `aigcData` to save gas.\\n     */\\n    function mint(\\n        uint256 prompt,\\n        uint256 aigcData,\\n        string calldata uri,\\n        bytes calldata proof,\\n        address to\\n    ) external returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Verify the `prompt`, `aigcData` and `proof`.\\n     */\\n    function verify(\\n        uint256 prompt,\\n        uint256 aigcData,\\n        bytes calldata proof\\n    ) external view returns (bool success);\\n}\\n\",\"keccak256\":\"0x874f2e82b9e0e415e4add4f6705536de69e20481e31dcd31fbe498e987798119\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IWorldID {\\n\\t/// @notice Reverts if the zero-knowledge proof is invalid.\\n\\t/// @param root The of the Merkle tree\\n\\t/// @param groupId The id of the Semaphore group\\n\\t/// @param signalHash A keccak256 hash of the Semaphore signal\\n\\t/// @param nullifierHash The nullifier hash\\n\\t/// @param externalNullifierHash A keccak256 hash of the external nullifier\\n\\t/// @param proof The zero-knowledge proof\\n\\t/// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n\\tfunction verifyProof(\\n\\t\\tuint256 root,\\n\\t\\tuint256 groupId,\\n\\t\\tuint256 signalHash,\\n\\t\\tuint256 nullifierHash,\\n\\t\\tuint256 externalNullifierHash,\\n\\t\\tuint256[8] calldata proof\\n\\t) external view;\\n}\",\"keccak256\":\"0xf54758d6980f3398fd68e9e4baf2feba650d173a59deb0a4e7ce0e19d74859af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003383380380620033838339810160408190526200003491620001bd565b6200003f3362000092565b8282826040516200005090620000e2565b6200005e9392919062000275565b604051809103906000f0801580156200007b573d6000803e3d6000fd5b506001600160a01b031660805250620002af915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105438062002e4083390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200012357818101518382015260200162000109565b50506000910152565b600082601f8301126200013e57600080fd5b81516001600160401b03808211156200015b576200015b620000f0565b604051601f8301601f19908116603f01168101908282118183101715620001865762000186620000f0565b81604052838152866020858801011115620001a057600080fd5b620001b384602083016020890162000106565b9695505050505050565b600080600060608486031215620001d357600080fd5b83516001600160a01b0381168114620001eb57600080fd5b60208501519093506001600160401b03808211156200020957600080fd5b62000217878388016200012c565b935060408601519150808211156200022e57600080fd5b506200023d868287016200012c565b9150509250925092565b600081518084526200026181602086016020860162000106565b601f01601f19169290920160200192915050565b6001600160a01b03841681526060602082018190526000906200029b9083018562000247565b8281036040840152620001b3818562000247565b608051612b6e620002d26000396000818161018201526105ab0152612b6e6000f3fe608060405260043610620000b55760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001bb578063a24235a514620001db578063cfed246b1462000200578063d0e30db01462000231578063f2fde38b146200023b578063f8b2cb4f146200026057600080fd5b806327e235e314620000ba5780633ccfd60b14620000fe578063614964401462000118578063715018a61462000156578063753e9ef0146200016e57806380d5cc3014620001a4575b600080fd5b348015620000c757600080fd5b50620000eb620000d936600462000abf565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156200010b57600080fd5b50620001166200029a565b005b3480156200012557600080fd5b506200013d6200013736600462000ae4565b620002e0565b6040516001600160a01b039091168152602001620000f5565b3480156200016357600080fd5b506200011662000350565b3480156200017b57600080fd5b506200013d7f000000000000000000000000000000000000000000000000000000000000000081565b62000116620001b536600462000b6e565b62000368565b348015620001c857600080fd5b506000546001600160a01b03166200013d565b348015620001e857600080fd5b5062000116620001fa36600462000cbb565b6200058a565b3480156200020d57600080fd5b50620000eb6200021f36600462000abf565b60026020526000908152604090205481565b62000116620006aa565b3480156200024857600080fd5b50620001166200025a36600462000abf565b620006d2565b3480156200026d57600080fd5b50620000eb6200027f36600462000abf565b6001600160a01b031660009081526001602052604090205490565b33600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015620002dc573d6000803e3d6000fd5b5050565b6000620002ec62000751565b600082604051620002fd9062000a94565b6001600160a01b039091168152602001604051809103906000f0801580156200032a573d6000803e3d6000fd5b506001600160a01b03811660009081526002602052604090208590559150505b92915050565b6200035a62000751565b620003666000620007ad565b565b6200037262000751565b6001600160a01b03808a16600090815260026020908152604080832054938516835260019091529020541015620003e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064015b60405180910390fd5b600088604051602001620003fd91815260200190565b604051602081830303815290604052805190602001209050620004598362000452837f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90620007fd565b6001600160a01b0316826001600160a01b0316146200047757600080fd5b6001600160a01b038a16600090815260026020526040808220549051339282156108fc02929190818181858888f19350505050158015620004bc573d6000803e3d6000fd5b506001600160a01b03808b166000908152600260209081526040808320549386168352600190915281208054909190620004f890849062000db2565b90915550506040516371b24d0b60e11b81526001600160a01b038b169063e3649a169062000537908c908c908c908c908c908c908b9060040162000df1565b6020604051808303816000875af115801562000557573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057d919062000e45565b5050505050505050505050565b6200059462000751565b604051631e6ab53360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e6ab53390620005e890879087908790879060040162000e5f565b600060405180830381600087803b1580156200060357600080fd5b505af115801562000618573d6000803e3d6000fd5b50506040516371b24d0b60e11b81526001600160a01b038e16925063e3649a16915062000656908d908d908d908d908d908d908d9060040162000df1565b6020604051808303816000875af115801562000676573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069c919062000e45565b505050505050505050505050565b3360009081526001602052604081208054349290620006cb90849062000e90565b9091555050565b620006dc62000751565b6001600160a01b038116620007435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003de565b6200074e81620007ad565b50565b6000546001600160a01b03163314620003665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003de565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060006200080e858562000825565b915091506200081d816200086e565b509392505050565b60008082516041036200085f5760208301516040840151606085015160001a6200085287828585620009cb565b9450945050505062000867565b506000905060025b9250929050565b600081600481111562000885576200088562000ea6565b036200088e5750565b6001816004811115620008a557620008a562000ea6565b03620008f45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620003de565b60028160048111156200090b576200090b62000ea6565b036200095a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620003de565b600381600481111562000971576200097162000ea6565b036200074e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620003de565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111562000a04575060009050600362000a8b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562000a59573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662000a845760006001925092505062000a8b565b9150600090505b94509492505050565b611c7c8062000ebd83390190565b80356001600160a01b038116811462000aba57600080fd5b919050565b60006020828403121562000ad257600080fd5b62000add8262000aa2565b9392505050565b6000806040838503121562000af857600080fd5b8235915062000b0a6020840162000aa2565b90509250929050565b60008083601f84011262000b2657600080fd5b50813567ffffffffffffffff81111562000b3f57600080fd5b6020830191508360208285010111156200086757600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080600060e08a8c03121562000b8d57600080fd5b62000b988a62000aa2565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111562000bc457600080fd5b62000bd28d838e0162000b13565b909850965060808c013591508082111562000bec57600080fd5b62000bfa8d838e0162000b13565b909650945060a08c013591508082111562000c1457600080fd5b818c0191508c601f83011262000c2957600080fd5b81358181111562000c3e5762000c3e62000b58565b604051601f8201601f19908116603f0116810190838211818310171562000c695762000c6962000b58565b816040528281528f602084870101111562000c8357600080fd5b82602086016020830137600060208483010152809650505050505062000cac60c08b0162000aa2565b90509295985092959850929598565b60008060008060008060008060008060006102008c8e03121562000cde57600080fd5b62000ce98c62000aa2565b9a5060208c0135995060408c0135985067ffffffffffffffff8060608e0135111562000d1457600080fd5b62000d268e60608f01358f0162000b13565b909950975060808d013581101562000d3d57600080fd5b5062000d508d60808e01358e0162000b13565b909650945062000d6360a08d0162000aa2565b935060c08c0135925060e08c013591508c6102008d01111562000d8557600080fd5b6101008c0190509295989b509295989b9093969950565b634e487b7160e01b600052601160045260246000fd5b818103818111156200034a576200034a62000d9c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815286602082015260a06040820152600062000e1360a08301878962000dc8565b828103606084015262000e2881868862000dc8565b91505060018060a01b038316608083015298975050505050505050565b60006020828403121562000e5857600080fd5b5051919050565b6001600160a01b03851681526020810184905260408101839052610160810161010083606084013795945050505050565b808201808211156200034a576200034a62000d9c565b634e487b7160e01b600052602160045260246000fdfe60806040523480156200001157600080fd5b5060405162001c7c38038062001c7c833981016040819052620000349162000105565b60405180604001604052806005815260200164474d41535360d81b81525060405180604001604052806005815260200164474d41535360d81b8152506200008a62000084620000b160201b60201c565b620000b5565b6001620000988382620001dc565b506002620000a78282620001dc565b50505050620002a8565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011857600080fd5b81516001600160a01b03811681146200013057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016257607f821691505b6020821081036200018357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d757600081815260208120601f850160051c81016020861015620001b25750805b601f850160051c820191505b81811015620001d357828155600101620001be565b5050505b505050565b81516001600160401b03811115620001f857620001f862000137565b62000210816200020984546200014d565b8462000189565b602080601f8311600181146200024857600084156200022f5750858301515b600019600386901b1c1916600185901b178555620001d3565b600085815260208120601f198616915b82811015620002795788860151825594840194600190910190840162000258565b5085821015620002985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6119c480620002b86000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063b857e3861161007c578063b857e38614610276578063b88d4fde14610289578063c87b56dd1461029c578063e3649a16146102af578063e985e9c5146102c2578063f2fde38b146102d557600080fd5b806370a082311461022f578063715018a6146102425780638da5cb5b1461024a57806395d89b411461025b578063a22cb4651461026357600080fd5b80632b7ac3f3116100ff5780632b7ac3f3146101cc57806342842e0e146101df57806361bc221a146101f25780636352211e146102095780636c8b703f1461021c57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806323b872dd146101b9575b600080fd5b61014f61014a366004611249565b6102e8565b60405190151581526020015b60405180910390f35b61016c61033a565b60405161015b91906112b6565b61018c6101873660046112c9565b6103cc565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046112fe565b6103f3565b005b6101b76101c7366004611328565b61050d565b60085461018c906001600160a01b031681565b6101b76101ed366004611328565b61053e565b6101fb60075481565b60405190815260200161015b565b61018c6102173660046112c9565b610559565b61016c61022a3660046112c9565b6105b9565b6101fb61023d366004611364565b610653565b6101b76106d9565b6000546001600160a01b031661018c565b61016c6106ed565b6101b761027136600461138d565b6106fc565b61014f61028436600461140d565b61070b565b6101b7610297366004611476565b610724565b61016c6102aa3660046112c9565b61075c565b6101fb6102bd366004611552565b6107d0565b61014f6102d03660046115e6565b610878565b6101b76102e3366004611364565b6108a6565b60006001600160e01b031982166380ac58cd60e01b148061031957506001600160e01b03198216635b5e139f60e01b145b8061033457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461034990611619565b80601f016020809104026020016040519081016040528092919081815260200182805461037590611619565b80156103c25780601f10610397576101008083540402835291602001916103c2565b820191906000526020600020905b8154815290600101906020018083116103a557829003601f168201915b5050505050905090565b60006103d78261091f565b506000908152600560205260409020546001600160a01b031690565b60006103fe82610559565b9050806001600160a01b0316836001600160a01b0316036104705760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061048c575061048c8133610878565b6104fe5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610467565b610508838361097e565b505050565b61051733826109ec565b6105335760405162461bcd60e51b815260040161046790611653565b610508838383610a4a565b61050883838360405180602001604052806000815250610724565b6000818152600360205260408120546001600160a01b0316806103345760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610467565b600960205260009081526040902080546105d290611619565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90611619565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b505050505081565b60006001600160a01b0382166106bd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610467565b506001600160a01b031660009081526004602052604090205490565b6106e1610bae565b6106eb6000610c08565b565b60606002805461034990611619565b610707338383610c58565b5050565b600061071985858585610d26565b90505b949350505050565b61072e33836109ec565b61074a5760405162461bcd60e51b815260040161046790611653565b61075684848484610e0c565b50505050565b60606107678261091f565b600061077e60408051602081019091526000815290565b9050600081511161079e57604051806020016040528060008152506107c9565b806107a884610e3f565b6040516020016107b99291906116a0565b6040516020818303038152906040525b9392505050565b60006107da610bae565b6107e688888686610d26565b6108285760405162461bcd60e51b815260206004820152601360248201527215995c9a599a58d85d1a5bdb8819985a5b1959606a1b6044820152606401610467565b61083482600754610ed2565b600754600090815260096020526040902061085086888361171d565b5060016007600082825461086491906117de565b909155505060075498975050505050505050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6108ae610bae565b6001600160a01b0381166109135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610467565b61091c81610c08565b50565b6000818152600360205260409020546001600160a01b031661091c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610467565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109b382610559565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109f883610559565b9050806001600160a01b0316846001600160a01b03161480610a1f5750610a1f8185610878565b8061071c5750836001600160a01b0316610a38846103cc565b6001600160a01b031614949350505050565b826001600160a01b0316610a5d82610559565b6001600160a01b031614610a835760405162461bcd60e51b8152600401610467906117ff565b6001600160a01b038216610ae55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610467565b826001600160a01b0316610af882610559565b6001600160a01b031614610b1e5760405162461bcd60e51b8152600401610467906117ff565b600081815260056020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b031633146106eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610cb95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610467565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b604080516001808252818301909252600091829190602080830190803683370190505090508581600081518110610d5f57610d5f611844565b6020026020010181815250508481600181518110610d7f57610d7f611844565b6020908102919091010152600854604051630bd205a960e41b81526001600160a01b0390911690819063bd205a9090610dc09085908990899060040161185a565b602060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0191906118c5565b979650505050505050565b610e17848484610a4a565b610e238484848461105d565b6107565760405162461bcd60e51b8152600401610467906118e2565b60606000610e4c8361115b565b600101905060008167ffffffffffffffff811115610e6c57610e6c611460565b6040519080825280601f01601f191660200182016040528015610e96576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ea057509392505050565b6001600160a01b038216610f285760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610467565b6000818152600360205260409020546001600160a01b031615610f8d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610467565b6000818152600360205260409020546001600160a01b031615610ff25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610467565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561115357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110a1903390899088908890600401611934565b6020604051808303816000875af19250505080156110dc575060408051601f3d908101601f191682019092526110d991810190611971565b60015b611139573d80801561110a576040519150601f19603f3d011682016040523d82523d6000602084013e61110f565b606091505b5080516000036111315760405162461bcd60e51b8152600401610467906118e2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061071c565b50600161071c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061119a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111c6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111e457662386f26fc10000830492506010015b6305f5e10083106111fc576305f5e100830492506008015b612710831061121057612710830492506004015b60648310611222576064830492506002015b600a83106103345760010192915050565b6001600160e01b03198116811461091c57600080fd5b60006020828403121561125b57600080fd5b81356107c981611233565b60005b83811015611281578181015183820152602001611269565b50506000910152565b600081518084526112a2816020860160208601611266565b601f01601f19169290920160200192915050565b6020815260006107c9602083018461128a565b6000602082840312156112db57600080fd5b5035919050565b80356001600160a01b03811681146112f957600080fd5b919050565b6000806040838503121561131157600080fd5b61131a836112e2565b946020939093013593505050565b60008060006060848603121561133d57600080fd5b611346846112e2565b9250611354602085016112e2565b9150604084013590509250925092565b60006020828403121561137657600080fd5b6107c9826112e2565b801515811461091c57600080fd5b600080604083850312156113a057600080fd5b6113a9836112e2565b915060208301356113b98161137f565b809150509250929050565b60008083601f8401126113d657600080fd5b50813567ffffffffffffffff8111156113ee57600080fd5b60208301915083602082850101111561140657600080fd5b9250929050565b6000806000806060858703121561142357600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561144857600080fd5b611454878288016113c4565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561148c57600080fd5b611495856112e2565b93506114a3602086016112e2565b925060408501359150606085013567ffffffffffffffff808211156114c757600080fd5b818701915087601f8301126114db57600080fd5b8135818111156114ed576114ed611460565b604051601f8201601f19908116603f0116810190838211818310171561151557611515611460565b816040528281528a602084870101111561152e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600080600080600060a0888a03121561156d57600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561159357600080fd5b61159f8b838c016113c4565b909750955060608a01359150808211156115b857600080fd5b506115c58a828b016113c4565b90945092506115d89050608089016112e2565b905092959891949750929550565b600080604083850312156115f957600080fd5b611602836112e2565b9150611610602084016112e2565b90509250929050565b600181811c9082168061162d57607f821691505b60208210810361164d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600083516116b2818460208801611266565b8351908301906116c6818360208801611266565b01949350505050565b601f82111561050857600081815260208120601f850160051c810160208610156116f65750805b601f850160051c820191505b8181101561171557828155600101611702565b505050505050565b67ffffffffffffffff83111561173557611735611460565b611749836117438354611619565b836116cf565b6000601f84116001811461177d57600085156117655750838201355b600019600387901b1c1916600186901b1783556117d7565b600083815260209020601f19861690835b828110156117ae578685013582556020948501946001909201910161178e565b50868210156117cb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8082018082111561033457634e487b7160e01b600052601160045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b604080825284519082018190526000906020906060840190828801845b8281101561189357815184529284019290840190600101611877565b505050838103828501528481528486838301376000818601830152601f909401601f1916909301909201949350505050565b6000602082840312156118d757600080fd5b81516107c98161137f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906119679083018461128a565b9695505050505050565b60006020828403121561198357600080fd5b81516107c98161123356fea2646970667358221220c40b566754f70714413187c392d93ef6c0e0040d6ed6d5c5ddc21ea003fba24564736f6c63430008120033a2646970667358221220844f5b78bb0257be74b53242b6b75d5cfeaad9a42046c04a848bf920f553af4c64736f6c6343000812003360e0604052600160c05234801561001557600080fd5b506040516105433803806105438339810160408190526100349161018c565b6001600160a01b03831660805260405161008a906100789061005a90859060200161020e565b60405160208183030381529060405261009660201b6101981760201c565b8260405160200161005a92919061022a565b60a05250610250915050565b60006008826040516020016100ab919061020e565b60408051601f198184030181529190528051602090910120901c92915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156100fc5781810151838201526020016100e4565b50506000910152565b600082601f83011261011657600080fd5b81516001600160401b0380821115610130576101306100cb565b604051601f8301601f19908116603f01168101908282118183101715610158576101586100cb565b8160405283815286602085880101111561017157600080fd5b6101828460208301602089016100e1565b9695505050505050565b6000806000606084860312156101a157600080fd5b83516001600160a01b03811681146101b857600080fd5b60208501519093506001600160401b03808211156101d557600080fd5b6101e187838801610105565b935060408601519150808211156101f757600080fd5b5061020486828701610105565b9150509250925092565b600082516102208184602087016100e1565b9190910192915050565b828152600082516102428160208501602087016100e1565b919091016020019392505050565b60805160a05160c0516102c661027d600039600060a70152600061010901526000607701526102c66000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80631e6ab53314610030575b600080fd5b61004361003e3660046101cd565b610045565b005b60008281526020819052604090205460ff161561007557604051632ec8265960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633bc778e3847f0000000000000000000000000000000000000000000000000000000000000000610106886040516020016100f2919060609190911b6bffffffffffffffffffffffff1916815260140190565b604051602081830303815290604052610198565b867f0000000000000000000000000000000000000000000000000000000000000000876040518763ffffffff1660e01b815260040161014a96959493929190610229565b60006040518083038186803b15801561016257600080fd5b505afa158015610176573d6000803e3d6000fd5b50505060009283525050602081905260409020805460ff191660011790555050565b60006008826040516020016101ad9190610261565b60408051601f198184030181529190528051602090910120901c92915050565b6000806000806101608086880312156101e557600080fd5b85356001600160a01b03811681146101fc57600080fd5b9450602086013593506040860135925080860187101561021b57600080fd5b509295919450926060019150565b60006101a0820190508782528660208301528560408301528460608301528360808301526101008360a0840137979650505050505050565b6000825160005b818110156102825760208186018101518583015201610268565b50600092019182525091905056fea264697066735822122048e3d4e116a1f889683b45f91c96127f4f5af0273c1c04d7eed2c67c9cd82b2164736f6c63430008120033",
  "deployedBytecode": "0x608060405260043610620000b55760003560e01c80638da5cb5b116200006c5780638da5cb5b14620001bb578063a24235a514620001db578063cfed246b1462000200578063d0e30db01462000231578063f2fde38b146200023b578063f8b2cb4f146200026057600080fd5b806327e235e314620000ba5780633ccfd60b14620000fe578063614964401462000118578063715018a61462000156578063753e9ef0146200016e57806380d5cc3014620001a4575b600080fd5b348015620000c757600080fd5b50620000eb620000d936600462000abf565b60016020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156200010b57600080fd5b50620001166200029a565b005b3480156200012557600080fd5b506200013d6200013736600462000ae4565b620002e0565b6040516001600160a01b039091168152602001620000f5565b3480156200016357600080fd5b506200011662000350565b3480156200017b57600080fd5b506200013d7f000000000000000000000000000000000000000000000000000000000000000081565b62000116620001b536600462000b6e565b62000368565b348015620001c857600080fd5b506000546001600160a01b03166200013d565b348015620001e857600080fd5b5062000116620001fa36600462000cbb565b6200058a565b3480156200020d57600080fd5b50620000eb6200021f36600462000abf565b60026020526000908152604090205481565b62000116620006aa565b3480156200024857600080fd5b50620001166200025a36600462000abf565b620006d2565b3480156200026d57600080fd5b50620000eb6200027f36600462000abf565b6001600160a01b031660009081526001602052604090205490565b33600081815260016020526040808220805490839055905190929183156108fc02918491818181858888f19350505050158015620002dc573d6000803e3d6000fd5b5050565b6000620002ec62000751565b600082604051620002fd9062000a94565b6001600160a01b039091168152602001604051809103906000f0801580156200032a573d6000803e3d6000fd5b506001600160a01b03811660009081526002602052604090208590559150505b92915050565b6200035a62000751565b620003666000620007ad565b565b6200037262000751565b6001600160a01b03808a16600090815260026020908152604080832054938516835260019091529020541015620003e75760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064015b60405180910390fd5b600088604051602001620003fd91815260200190565b604051602081830303815290604052805190602001209050620004598362000452837f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b90620007fd565b6001600160a01b0316826001600160a01b0316146200047757600080fd5b6001600160a01b038a16600090815260026020526040808220549051339282156108fc02929190818181858888f19350505050158015620004bc573d6000803e3d6000fd5b506001600160a01b03808b166000908152600260209081526040808320549386168352600190915281208054909190620004f890849062000db2565b90915550506040516371b24d0b60e11b81526001600160a01b038b169063e3649a169062000537908c908c908c908c908c908c908b9060040162000df1565b6020604051808303816000875af115801562000557573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200057d919062000e45565b5050505050505050505050565b6200059462000751565b604051631e6ab53360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e6ab53390620005e890879087908790879060040162000e5f565b600060405180830381600087803b1580156200060357600080fd5b505af115801562000618573d6000803e3d6000fd5b50506040516371b24d0b60e11b81526001600160a01b038e16925063e3649a16915062000656908d908d908d908d908d908d908d9060040162000df1565b6020604051808303816000875af115801562000676573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200069c919062000e45565b505050505050505050505050565b3360009081526001602052604081208054349290620006cb90849062000e90565b9091555050565b620006dc62000751565b6001600160a01b038116620007435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620003de565b6200074e81620007ad565b50565b6000546001600160a01b03163314620003665760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620003de565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060006200080e858562000825565b915091506200081d816200086e565b509392505050565b60008082516041036200085f5760208301516040840151606085015160001a6200085287828585620009cb565b9450945050505062000867565b506000905060025b9250929050565b600081600481111562000885576200088562000ea6565b036200088e5750565b6001816004811115620008a557620008a562000ea6565b03620008f45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620003de565b60028160048111156200090b576200090b62000ea6565b036200095a5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620003de565b600381600481111562000971576200097162000ea6565b036200074e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620003de565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111562000a04575060009050600362000a8b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562000a59573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662000a845760006001925092505062000a8b565b9150600090505b94509492505050565b611c7c8062000ebd83390190565b80356001600160a01b038116811462000aba57600080fd5b919050565b60006020828403121562000ad257600080fd5b62000add8262000aa2565b9392505050565b6000806040838503121562000af857600080fd5b8235915062000b0a6020840162000aa2565b90509250929050565b60008083601f84011262000b2657600080fd5b50813567ffffffffffffffff81111562000b3f57600080fd5b6020830191508360208285010111156200086757600080fd5b634e487b7160e01b600052604160045260246000fd5b600080600080600080600080600060e08a8c03121562000b8d57600080fd5b62000b988a62000aa2565b985060208a0135975060408a0135965060608a013567ffffffffffffffff8082111562000bc457600080fd5b62000bd28d838e0162000b13565b909850965060808c013591508082111562000bec57600080fd5b62000bfa8d838e0162000b13565b909650945060a08c013591508082111562000c1457600080fd5b818c0191508c601f83011262000c2957600080fd5b81358181111562000c3e5762000c3e62000b58565b604051601f8201601f19908116603f0116810190838211818310171562000c695762000c6962000b58565b816040528281528f602084870101111562000c8357600080fd5b82602086016020830137600060208483010152809650505050505062000cac60c08b0162000aa2565b90509295985092959850929598565b60008060008060008060008060008060006102008c8e03121562000cde57600080fd5b62000ce98c62000aa2565b9a5060208c0135995060408c0135985067ffffffffffffffff8060608e0135111562000d1457600080fd5b62000d268e60608f01358f0162000b13565b909950975060808d013581101562000d3d57600080fd5b5062000d508d60808e01358e0162000b13565b909650945062000d6360a08d0162000aa2565b935060c08c0135925060e08c013591508c6102008d01111562000d8557600080fd5b6101008c0190509295989b509295989b9093969950565b634e487b7160e01b600052601160045260246000fd5b818103818111156200034a576200034a62000d9c565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b87815286602082015260a06040820152600062000e1360a08301878962000dc8565b828103606084015262000e2881868862000dc8565b91505060018060a01b038316608083015298975050505050505050565b60006020828403121562000e5857600080fd5b5051919050565b6001600160a01b03851681526020810184905260408101839052610160810161010083606084013795945050505050565b808201808211156200034a576200034a62000d9c565b634e487b7160e01b600052602160045260246000fdfe60806040523480156200001157600080fd5b5060405162001c7c38038062001c7c833981016040819052620000349162000105565b60405180604001604052806005815260200164474d41535360d81b81525060405180604001604052806005815260200164474d41535360d81b8152506200008a62000084620000b160201b60201c565b620000b5565b6001620000988382620001dc565b506002620000a78282620001dc565b50505050620002a8565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200011857600080fd5b81516001600160a01b03811681146200013057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200016257607f821691505b6020821081036200018357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001d757600081815260208120601f850160051c81016020861015620001b25750805b601f850160051c820191505b81811015620001d357828155600101620001be565b5050505b505050565b81516001600160401b03811115620001f857620001f862000137565b62000210816200020984546200014d565b8462000189565b602080601f8311600181146200024857600084156200022f5750858301515b600019600386901b1c1916600185901b178555620001d3565b600085815260208120601f198616915b82811015620002795788860151825594840194600190910190840162000258565b5085821015620002985787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6119c480620002b86000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370a08231116100b8578063b857e3861161007c578063b857e38614610276578063b88d4fde14610289578063c87b56dd1461029c578063e3649a16146102af578063e985e9c5146102c2578063f2fde38b146102d557600080fd5b806370a082311461022f578063715018a6146102425780638da5cb5b1461024a57806395d89b411461025b578063a22cb4651461026357600080fd5b80632b7ac3f3116100ff5780632b7ac3f3146101cc57806342842e0e146101df57806361bc221a146101f25780636352211e146102095780636c8b703f1461021c57600080fd5b806301ffc9a71461013c57806306fdde0314610164578063081812fc14610179578063095ea7b3146101a457806323b872dd146101b9575b600080fd5b61014f61014a366004611249565b6102e8565b60405190151581526020015b60405180910390f35b61016c61033a565b60405161015b91906112b6565b61018c6101873660046112c9565b6103cc565b6040516001600160a01b03909116815260200161015b565b6101b76101b23660046112fe565b6103f3565b005b6101b76101c7366004611328565b61050d565b60085461018c906001600160a01b031681565b6101b76101ed366004611328565b61053e565b6101fb60075481565b60405190815260200161015b565b61018c6102173660046112c9565b610559565b61016c61022a3660046112c9565b6105b9565b6101fb61023d366004611364565b610653565b6101b76106d9565b6000546001600160a01b031661018c565b61016c6106ed565b6101b761027136600461138d565b6106fc565b61014f61028436600461140d565b61070b565b6101b7610297366004611476565b610724565b61016c6102aa3660046112c9565b61075c565b6101fb6102bd366004611552565b6107d0565b61014f6102d03660046115e6565b610878565b6101b76102e3366004611364565b6108a6565b60006001600160e01b031982166380ac58cd60e01b148061031957506001600160e01b03198216635b5e139f60e01b145b8061033457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461034990611619565b80601f016020809104026020016040519081016040528092919081815260200182805461037590611619565b80156103c25780601f10610397576101008083540402835291602001916103c2565b820191906000526020600020905b8154815290600101906020018083116103a557829003601f168201915b5050505050905090565b60006103d78261091f565b506000908152600560205260409020546001600160a01b031690565b60006103fe82610559565b9050806001600160a01b0316836001600160a01b0316036104705760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061048c575061048c8133610878565b6104fe5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610467565b610508838361097e565b505050565b61051733826109ec565b6105335760405162461bcd60e51b815260040161046790611653565b610508838383610a4a565b61050883838360405180602001604052806000815250610724565b6000818152600360205260408120546001600160a01b0316806103345760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610467565b600960205260009081526040902080546105d290611619565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe90611619565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b505050505081565b60006001600160a01b0382166106bd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610467565b506001600160a01b031660009081526004602052604090205490565b6106e1610bae565b6106eb6000610c08565b565b60606002805461034990611619565b610707338383610c58565b5050565b600061071985858585610d26565b90505b949350505050565b61072e33836109ec565b61074a5760405162461bcd60e51b815260040161046790611653565b61075684848484610e0c565b50505050565b60606107678261091f565b600061077e60408051602081019091526000815290565b9050600081511161079e57604051806020016040528060008152506107c9565b806107a884610e3f565b6040516020016107b99291906116a0565b6040516020818303038152906040525b9392505050565b60006107da610bae565b6107e688888686610d26565b6108285760405162461bcd60e51b815260206004820152601360248201527215995c9a599a58d85d1a5bdb8819985a5b1959606a1b6044820152606401610467565b61083482600754610ed2565b600754600090815260096020526040902061085086888361171d565b5060016007600082825461086491906117de565b909155505060075498975050505050505050565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6108ae610bae565b6001600160a01b0381166109135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610467565b61091c81610c08565b50565b6000818152600360205260409020546001600160a01b031661091c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610467565b600081815260056020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109b382610559565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109f883610559565b9050806001600160a01b0316846001600160a01b03161480610a1f5750610a1f8185610878565b8061071c5750836001600160a01b0316610a38846103cc565b6001600160a01b031614949350505050565b826001600160a01b0316610a5d82610559565b6001600160a01b031614610a835760405162461bcd60e51b8152600401610467906117ff565b6001600160a01b038216610ae55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610467565b826001600160a01b0316610af882610559565b6001600160a01b031614610b1e5760405162461bcd60e51b8152600401610467906117ff565b600081815260056020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260048552838620805460001901905590871680865283862080546001019055868652600390945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000546001600160a01b031633146106eb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610467565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610cb95760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610467565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b604080516001808252818301909252600091829190602080830190803683370190505090508581600081518110610d5f57610d5f611844565b6020026020010181815250508481600181518110610d7f57610d7f611844565b6020908102919091010152600854604051630bd205a960e41b81526001600160a01b0390911690819063bd205a9090610dc09085908990899060040161185a565b602060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0191906118c5565b979650505050505050565b610e17848484610a4a565b610e238484848461105d565b6107565760405162461bcd60e51b8152600401610467906118e2565b60606000610e4c8361115b565b600101905060008167ffffffffffffffff811115610e6c57610e6c611460565b6040519080825280601f01601f191660200182016040528015610e96576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ea057509392505050565b6001600160a01b038216610f285760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610467565b6000818152600360205260409020546001600160a01b031615610f8d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610467565b6000818152600360205260409020546001600160a01b031615610ff25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610467565b6001600160a01b038216600081815260046020908152604080832080546001019055848352600390915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561115357604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110a1903390899088908890600401611934565b6020604051808303816000875af19250505080156110dc575060408051601f3d908101601f191682019092526110d991810190611971565b60015b611139573d80801561110a576040519150601f19603f3d011682016040523d82523d6000602084013e61110f565b606091505b5080516000036111315760405162461bcd60e51b8152600401610467906118e2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061071c565b50600161071c565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061119a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106111c6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106111e457662386f26fc10000830492506010015b6305f5e10083106111fc576305f5e100830492506008015b612710831061121057612710830492506004015b60648310611222576064830492506002015b600a83106103345760010192915050565b6001600160e01b03198116811461091c57600080fd5b60006020828403121561125b57600080fd5b81356107c981611233565b60005b83811015611281578181015183820152602001611269565b50506000910152565b600081518084526112a2816020860160208601611266565b601f01601f19169290920160200192915050565b6020815260006107c9602083018461128a565b6000602082840312156112db57600080fd5b5035919050565b80356001600160a01b03811681146112f957600080fd5b919050565b6000806040838503121561131157600080fd5b61131a836112e2565b946020939093013593505050565b60008060006060848603121561133d57600080fd5b611346846112e2565b9250611354602085016112e2565b9150604084013590509250925092565b60006020828403121561137657600080fd5b6107c9826112e2565b801515811461091c57600080fd5b600080604083850312156113a057600080fd5b6113a9836112e2565b915060208301356113b98161137f565b809150509250929050565b60008083601f8401126113d657600080fd5b50813567ffffffffffffffff8111156113ee57600080fd5b60208301915083602082850101111561140657600080fd5b9250929050565b6000806000806060858703121561142357600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561144857600080fd5b611454878288016113c4565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561148c57600080fd5b611495856112e2565b93506114a3602086016112e2565b925060408501359150606085013567ffffffffffffffff808211156114c757600080fd5b818701915087601f8301126114db57600080fd5b8135818111156114ed576114ed611460565b604051601f8201601f19908116603f0116810190838211818310171561151557611515611460565b816040528281528a602084870101111561152e57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080600080600080600060a0888a03121561156d57600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561159357600080fd5b61159f8b838c016113c4565b909750955060608a01359150808211156115b857600080fd5b506115c58a828b016113c4565b90945092506115d89050608089016112e2565b905092959891949750929550565b600080604083850312156115f957600080fd5b611602836112e2565b9150611610602084016112e2565b90509250929050565b600181811c9082168061162d57607f821691505b60208210810361164d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600083516116b2818460208801611266565b8351908301906116c6818360208801611266565b01949350505050565b601f82111561050857600081815260208120601f850160051c810160208610156116f65750805b601f850160051c820191505b8181101561171557828155600101611702565b505050505050565b67ffffffffffffffff83111561173557611735611460565b611749836117438354611619565b836116cf565b6000601f84116001811461177d57600085156117655750838201355b600019600387901b1c1916600186901b1783556117d7565b600083815260209020601f19861690835b828110156117ae578685013582556020948501946001909201910161178e565b50868210156117cb5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b8082018082111561033457634e487b7160e01b600052601160045260246000fd5b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b604080825284519082018190526000906020906060840190828801845b8281101561189357815184529284019290840190600101611877565b505050838103828501528481528486838301376000818601830152601f909401601f1916909301909201949350505050565b6000602082840312156118d757600080fd5b81516107c98161137f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906119679083018461128a565b9695505050505050565b60006020828403121561198357600080fd5b81516107c98161123356fea2646970667358221220c40b566754f70714413187c392d93ef6c0e0040d6ed6d5c5ddc21ea003fba24564736f6c63430008120033a2646970667358221220844f5b78bb0257be74b53242b6b75d5cfeaad9a42046c04a848bf920f553af4c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit()": {
        "details": "Deposit ETH to the contract"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Withdraw ETH from the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ModelMarket.sol:ModelMarket",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3327,
        "contract": "contracts/ModelMarket.sol:ModelMarket",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3331,
        "contract": "contracts/ModelMarket.sol:ModelMarket",
        "label": "prices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}